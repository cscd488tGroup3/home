---
import Layout from '../layouts/Layout.astro';
import { setupFormHandlers, renderSavedPosts } from '../lib/feed/ui.js';
---

<Layout>
    <h1 id="createGroupHeader"><u>Create a Group</u></h1>
    <form id="createGroupForm">
        <label for="groupName">Group Name:</label>
        <input type="text" id="groupName" name="groupName" placeholder="Name the group" required />

        <div class="checkbox-container">
            <div>
                <input type="checkbox" id="isPublic" name="isPublic" />
                <label for="isPublic">Public Group</label>
            </div>
            <div>
                <input type="checkbox" id="isPrivate" name="isPrivate" />
                <label for="isPrivate">Private Group</label>
            </div>
        </div>

        <button type="submit">Create Group</button>
    </form>

    <!-- Display Created Group Section -->
    <div id="createdGroupSection" style="display: none;">
        <h2>Created Group</h2>
        <p><strong>Group Name:</strong> <span id="createdGroupName"></span></p>
        <p><strong>Group Type:</strong> <span id="createdGroupType"></span></p>
        <button id="deleteGroupButton" class="delete-group-button">Delete Group</button>
    </div>
    <div id="groupPostsSection" style="display: none;">
        <h2>Group Posts</h2>
        <!-- Group Dashboard Post Form (matches feed/index.astro) -->
        <button id="toggleFormButton" class="form-button">Create Post</button>
        <form id="postForm" style="display: none;">
          <label id="fileLabel" for="images" style="cursor: pointer;">Choose File</label>
          <input
            type="file"
            id="images"
            name="images"
            accept="image/jpeg, image/png, image/webp"
            required
            style="display: none;"
          />
          <label for="caption">Caption the Post:</label>
          <input type="text" id="caption" name="caption" required />
          <span id="captionCounter">0/200</span>
          <button type="submit">Create Post</button>
        </form>
        <div id="postContainer"></div>
    </div>

    <!-- Join Group Section -->
    <div id="joinGroupSection">
        <h2><u>Join a Group</u></h2>
        <form id="joinGroupForm" onSubmit={async (e) => {
            e.preventDefault();
            const formData = new FormData(e.target);
            const gid = formData.get("groupId");

            try {
                const res = await joinGroupRequest({
                    worker: 'https://astro-d1-integration.ecrawford4.workers.dev/api/join',
                    data: { gid },
                });
                if (res.status === 200) {
                    alert("You have successfully joined the group as a Member!");
                    loadGroupMembers();
                } else {
                    alert("Failed to join the group.");
                }
            } catch (err) {
                alert("An error occurred while joining the group.");
            }
        }}>
            <label for="groupId">Group ID:</label>
            <input type="text" id="groupId" name="groupId" placeholder="Enter group ID" required />
            <button type="submit">Join Group</button>
        </form>
    </div>

    <!-- All Groups Section -->
    <div id="allGroupsSection">
        <h2><u>All Groups</u></h2>
        <ul id="allGroupsList"></ul>
    </div>

    <!-- Group Management Section -->
    <div id="groupManagementSection" class="group-management-section">
        <h2><u>Users List</u></h2>
        <ul id="groupMembersList" class="group-members-list">
            <!-- Users will be dynamically populated here -->
        </ul>
    </div>

    <script>
        const groupMembersList = document.getElementById('groupMembersList');
        const groupManagementSection = document.getElementById('groupManagementSection');
        const createdGroupSection = document.getElementById('createdGroupSection');
        const createdGroupName = document.getElementById('createdGroupName');
        const createdGroupType = document.getElementById('createdGroupType');
        const deleteGroupButton = document.getElementById('deleteGroupButton');
        const groupPostsSection = document.getElementById('groupPostsSection');
        const groupPostsList = document.getElementById('groupPostsList');

        let currentGroupId = null; // Store the current group ID

        const currentUserRole = "owner";

        if (currentUserRole === "owner" || currentUserRole === "admin") {
            groupManagementSection.style.display = "block";
        }

        function displayGroup(group) {
            currentGroupId = group.id;
            createdGroupName.textContent = group.gname;
            createdGroupType.textContent = group.isPrivate ? "Private" : "Public";
            createdGroupSection.style.display = "block";
            groupPostsSection.style.display = "block";
            // Hide other sections
            document.getElementById('createGroupForm').style.display = "none";
            document.getElementById('joinGroupSection').style.display = "none";
            document.getElementById('allGroupsSection').style.display = "none";
            groupManagementSection.style.display = "none";
            groupPostsList.innerHTML = '';
            // Hide the Create Group header
            document.getElementById('createGroupHeader').style.display = "none";
            // Only show post form if user is a member
            const joinedGroups = getJoinedGroups();
            document.getElementById('toggleFormButton').style.display = joinedGroups.includes(group.id) ? 'block' : 'none';
            document.getElementById('postForm').style.display = 'none'; // Hide by default
            loadGroupPosts();
        }

        // Toggle post form visibility
        document.getElementById('toggleFormButton').onclick = () => {
            const postForm = document.getElementById('postForm');
            const isVisible = postForm.style.display === 'block';
            postForm.style.display = isVisible ? 'none' : 'block';
            document.getElementById('caption').focus();
        };

        // Character counter for caption
        document.getElementById('caption').addEventListener('input', function() {
            const maxLength = 200;
            const currentLength = this.value.length;
            const counter = document.getElementById('captionCounter');
            counter.textContent = `${currentLength}/${maxLength}`;
            if (currentLength > maxLength) {
                this.value = this.value.substring(0, maxLength);
            }
        });

        // Show selected file name
        const imagesInput = document.getElementById('images');
        const fileLabel = document.getElementById('fileLabel');
        imagesInput.addEventListener('change', function() {
            if (imagesInput.files.length > 0) {
                fileLabel.textContent = imagesInput.files[0].name;
            } else {
                fileLabel.textContent = "Choose File";
            }
        });

        // Handle post creation (with image upload)
        document.getElementById('postForm').onsubmit = async function(e) {
            e.preventDefault();
            const formData = new FormData(e.target);
            formData.append('gid', currentGroupId);

            try {
                const res = await fetch('https://astro-d1-integration.ecrawford4.workers.dev/api/posts', {
                    method: 'POST',
                    body: formData,
                });
                if (res.status === 200) {
                    alert("Post created successfully!");
                    e.target.reset();
                    document.getElementById('postForm').style.display = 'none';
                    fileLabel.textContent = "Choose File";
                    loadGroupPosts();
                } else {
                    alert("Failed to create post.");
                }
            } catch (err) {
                alert("An error occurred while creating the post.");
            }
        };

        // Render posts (with images, captions, comments, likes)
        async function loadGroupPosts() {
            try {
                const res = await fetch(`https://astro-d1-integration.ecrawford4.workers.dev/api/posts?gid=${currentGroupId}`);
                if (res.status === 200) {
                    const posts = await res.json();
                    const postContainer = document.getElementById('postContainer');
                    postContainer.innerHTML = '';
                    posts.forEach((post) => {
                        const postDiv = document.createElement('div');
                        postDiv.className = 'post';

                        postDiv.innerHTML = `
                            ${post.imageUrl ? `<img src="${post.imageUrl}" alt="Post Image" class="post-image" />` : ''}
                            <div class="post-caption">${post.caption || ''}</div>
                            <div class="post-content">${post.content || ''}</div>
                            <button class="like-btn" data-postid="${post.id}">Like (${post.likes || 0})</button>
                            <div class="comments">
                                <ul>
                                    ${(post.comments || []).map(comment => `
                                        <li>
                                            <span class="comment-content">${comment.content}</span>
                                        </li>
                                    `).join('')}
                                </ul>
                                <form class="comment-form" data-postid="${post.id}">
                                    <input type="text" name="comment" placeholder="Add a comment..." required class="comment-input"/>
                                    <button type="submit" class="comment-submit-btn">Comment</button>
                                </form>
                            </div>
                        `;
                        postContainer.appendChild(postDiv);
                    });

                    // Like button logic
                    document.querySelectorAll('.like-btn').forEach(btn => {
                        btn.onclick = async (e) => {
                            const postId = btn.getAttribute('data-postid');
                            await fetch(`https://astro-d1-integration.ecrawford4.workers.dev/api/posts/${postId}/like`, { method: 'POST' });
                            loadGroupPosts();
                        };
                    });

                    // Comment form logic
                    document.querySelectorAll('.comment-form').forEach(form => {
                        form.onsubmit = async (e) => {
                            e.preventDefault();
                            const postId = form.getAttribute('data-postid');
                            const comment = form.comment.value;
                            await fetch(`https://astro-d1-integration.ecrawford4.workers.dev/api/posts/${postId}/comments`, {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({ content: comment }),
                            });
                            loadGroupPosts();
                        };
                    });
                } else {
                    document.getElementById('postContainer').innerHTML = '<div>No posts yet.</div>';
                }
            } catch (err) {
                document.getElementById('postContainer').innerHTML = '<div>Error loading posts.</div>';
            }
        }

        deleteGroupButton.addEventListener('click', async () => {
            if (!currentGroupId) {
                alert("No group to delete.");
                return;
            }

            const confirmDelete = confirm("Are you sure you want to delete this group?");
            if (!confirmDelete) return;

            try {
                const res = await fetch(`https://astro-d1-integration.ecrawford4.workers.dev/api/groups/${currentGroupId}`, {
                    method: 'DELETE',
                });
                if (res.status === 200) {
                    alert("Group deleted successfully.");
                    createdGroupSection.style.display = "none";
                    groupPostsSection.style.display = "none";
                    currentGroupId = null;
                } else {
                    alert("Failed to delete the group.");
                }
            } catch (err) {
                alert("An error occurred while deleting the group.");
            }
        });

        // Set this flag to true when displaying all users
        const displayingAllUsers = true;

        async function loadGroupMembers() {
            try {
                // Fetch all users from your API
                const res = await fetch('https://astro-d1-integration.ecrawford4.workers.dev/api/users');
                if (res.status === 200) {
                    const users = await res.json();
                    groupMembersList.innerHTML = '';
                    users.forEach((user) => {
                        const listItem = document.createElement('li');
                        listItem.style.display = "flex";
                        listItem.style.justifyContent = "space-between";
                        listItem.style.alignItems = "center";
                        listItem.innerHTML = `
                            <span>${user.name} (${user.email || user.username || user.id})</span>
                            <div style="display: flex; gap: 0.5em;">
                                ${
                                    displayingAllUsers && currentGroupId
                                    ? `<button class="invite-btn" onclick="inviteUserToGroup('${user.id}')">Invite</button>`
                                    : ''
                                }
                                ${
                                    currentUserRole === "owner" && currentGroupId && user.role !== "owner"
                                    ? user.role === "admin"
                                        ? `<button class="demote-btn" onclick="demoteToMember('${user.id}')">Demote to Member</button>`
                                        : `<button class="promote-btn" onclick="promoteToAdmin('${user.id}')">Promote to Admin</button>`
                                    : ''
                                }
                            </div>
                        `;
                        groupMembersList.appendChild(listItem);
                    });
                } else {
                    alert("Failed to load users.");
                }
            } catch (err) {
                alert("An error occurred while loading users.");
            }
        }

        // Invite user to group function
        window.inviteUserToGroup = async function(userId) {
            if (!currentGroupId) {
                alert("Please select or create a group first.");
                return;
            }
            try {
                const res = await fetch('https://astro-d1-integration.ecrawford4.workers.dev/api/invite', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ groupId: currentGroupId, userId }),
                });
                if (res.status === 200) {
                    alert("User invited to group!");
                } else {
                    alert("Failed to invite user.");
                }
            } catch (err) {
                alert("An error occurred while inviting the user.");
            }
        };

        // Helper: Get local groups from localStorage
        function getLocalGroups() {
            return JSON.parse(localStorage.getItem('localGroups') || '[]');
        }

        // Helper: Save local groups to localStorage
        function saveLocalGroups(groups) {
            localStorage.setItem('localGroups', JSON.stringify(groups));
        }

        // Helper: Get joined group IDs from localStorage
        function getJoinedGroups() {
            return JSON.parse(localStorage.getItem('joinedGroups') || '[]');
        }

        // Helper: Save joined group IDs to localStorage
        function saveJoinedGroups(joined) {
            localStorage.setItem('joinedGroups', JSON.stringify(joined));
        }

        // Render all groups (local only)
        function renderAllGroups() {
            const allGroupsList = document.getElementById('allGroupsList');
            allGroupsList.innerHTML = '';
            const groups = getLocalGroups();
            const joinedGroups = getJoinedGroups();

            // Button style to match "Create Group" and "Join Group" buttons
            const buttonStyle = `
                background: #fff;
                color: #222;
                border: 1.5px solid #bdbdbd;
                border-radius: 8px;
                padding: 0.4em 1.2em;
                font-size: 1em;
                font-weight: bold;
                cursor: pointer;
                margin-left: 1em;
                transition: background 0.2s;
                box-shadow: 0 1px 3px rgba(0,0,0,0.07);
            `;

            groups.forEach(group => {
                const li = document.createElement('li');
                // Create clickable group name if joined
                let groupNameElem;
                if (joinedGroups.includes(group.id)) {
                    groupNameElem = document.createElement('a');
                    groupNameElem.href = "#";
                    groupNameElem.textContent = `${group.gname} (${group.isPrivate ? 'Private' : 'Public'}) `;
                    groupNameElem.style.fontWeight = "bold";
                    groupNameElem.style.textDecoration = "underline";
                    groupNameElem.onclick = (e) => {
                        e.preventDefault();
                        displayGroup(group);
                    };
                } else {
                    groupNameElem = document.createElement('span');
                    groupNameElem.textContent = `${group.gname} (${group.isPrivate ? 'Private' : 'Public'}) `;
                }
                li.appendChild(groupNameElem);

                // Track requested groups in localStorage
                let requestedGroups = JSON.parse(localStorage.getItem('requestedGroups') || '[]');

                if (joinedGroups.includes(group.id)) {
                    // Joined + Leave box styled as button
                    const joinedBtn = document.createElement('span');
                    joinedBtn.setAttribute('style', buttonStyle + 'display: inline-flex; align-items: center; background: #eaffea; border-color: #6fcf97; color: #219150;');

                    const joinedSpan = document.createElement('span');
                    joinedSpan.textContent = 'Joined';
                    joinedSpan.style.color = '#219150';
                    joinedSpan.style.fontWeight = 'bold';
                    joinedSpan.style.marginRight = '0.7em';

                    const leaveBtn = document.createElement('button');
                    leaveBtn.textContent = 'Leave';
                    leaveBtn.setAttribute('style', buttonStyle + 'background: #fff; color: #d32f2f; border-color: #d32f2f; margin-left: 0;');
                    leaveBtn.onmouseover = () => leaveBtn.style.background = '#ffeaea';
                    leaveBtn.onmouseout = () => leaveBtn.style.background = '#fff';

                    leaveBtn.onclick = () => {
                        const idx = joinedGroups.indexOf(group.id);
                        if (idx !== -1) {
                            joinedGroups.splice(idx, 1);
                            saveJoinedGroups(joinedGroups);
                            renderAllGroups();
                            alert(`You left "${group.gname}".`);
                        }
                    };

                    joinedBtn.appendChild(joinedSpan);
                    joinedBtn.appendChild(leaveBtn);
                    li.appendChild(joinedBtn);
                } else {
                    if (group.isPrivate) {
                        // If already requested, show "Requested" with Cancel option
                        if (requestedGroups.includes(group.id)) {
                            const requestedBox = document.createElement('span');
                            requestedBox.setAttribute('style', buttonStyle + 'display: inline-flex; align-items: center; background: #fffbe6; border-color: #ffe082; color: #bfa100;');

                            const requestedSpan = document.createElement('span');
                            requestedSpan.textContent = 'Requested';
                            requestedSpan.style.color = '#bfa100';
                            requestedSpan.style.fontWeight = 'bold';
                            requestedSpan.style.marginRight = '0.7em';

                            const cancelBtn = document.createElement('button');
                            cancelBtn.textContent = 'Cancel';
                            cancelBtn.setAttribute('style', buttonStyle + 'background: #fff; color: #d32f2f; border-color: #d32f2f; margin-left: 0;');
                            cancelBtn.onmouseover = () => cancelBtn.style.background = '#ffeaea';
                            cancelBtn.onmouseout = () => cancelBtn.style.background = '#fff';

                            cancelBtn.onclick = () => {
                                requestedGroups = requestedGroups.filter(id => id !== group.id);
                                localStorage.setItem('requestedGroups', JSON.stringify(requestedGroups));
                                renderAllGroups();
                                alert(`Request to join "${group.gname}" cancelled.`);
                            };

                            requestedBox.appendChild(requestedSpan);
                            requestedBox.appendChild(cancelBtn);
                            li.appendChild(requestedBox);
                        } else {
                            // Not yet requested: show "Request to Join"
                            const requestBtn = document.createElement('button');
                            requestBtn.textContent = 'Request to Join';
                            requestBtn.setAttribute('style', buttonStyle);
                            requestBtn.onclick = () => {
                                requestedGroups.push(group.id);
                                localStorage.setItem('requestedGroups', JSON.stringify(requestedGroups));
                                renderAllGroups();
                                alert(`Request to join "${group.gname}" sent! Please wait for approval.`);
                            };
                            li.appendChild(requestBtn);
                        }
                    } else {
                        // Public group: show Join button
                        const joinBtn = document.createElement('button');
                        joinBtn.textContent = 'Join';
                        joinBtn.setAttribute('style', buttonStyle);
                        joinBtn.onmouseover = () => joinBtn.style.background = '#f0f0f0';
                        joinBtn.onmouseout = () => joinBtn.style.background = '#fff';

                        joinBtn.onclick = () => {
                            joinedGroups.push(group.id);
                            saveJoinedGroups(joinedGroups);
                            renderAllGroups();
                            alert(`You joined "${group.gname}"!`);
                        };

                        li.appendChild(joinBtn);
                    }
                }

                allGroupsList.appendChild(li);
            });
        }

        // On page load, render local groups
        renderAllGroups();

        // When creating a group, save it locally and re-render
        document.getElementById('createGroupForm').addEventListener('submit', function(e) {
            e.preventDefault();
            const formData = new FormData(e.target);
            const groupData = {
                gname: formData.get("groupName"),
                isPrivate: formData.get("isPrivate") === "on",
                isPublic: formData.get("isPublic") === "on",
                id: Date.now(), // simple unique id for local use
            };

            if (!groupData.isPrivate && !groupData.isPublic) {
                alert("You must select either Private or Public.");
                return;
            }

            // Save locally
            const groups = getLocalGroups();
            groups.push(groupData);
            saveLocalGroups(groups);

            // Optionally, also call your backend here if you want
            // (remove/comment out if you want local only)
            /*
            fetch('https://astro-d1-integration.ecrawford4.workers.dev/api/groups', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(groupData),
            });
            */

            e.target.reset();
            renderAllGroups();
            alert("Group created locally!");
        });

        async function loadAllGroups() {
            try {
                const res = await fetch('https://astro-d1-integration.ecrawford4.workers.dev/api/groups');
                if (res.status === 200) {
                    const groups = await res.json();
                    const allGroupsList = document.getElementById('allGroupsList');
                    allGroupsList.innerHTML = '';
                    groups.forEach(group => {
                        const li = document.createElement('li');
                        li.textContent = `${group.gname} (${group.isPrivate ? 'Private' : 'Public'})`;
                        allGroupsList.appendChild(li);
                    });
                } else {
                    alert("Failed to load groups.");
                }
            } catch (err) {
                alert("An error occurred while loading groups.");
            }
        }

        loadGroupMembers();

        const isPublicCheckbox = document.getElementById('isPublic');
        const isPrivateCheckbox = document.getElementById('isPrivate');

        // Ensure only one checkbox can be selected at a time
        isPublicCheckbox.addEventListener('change', () => {
            if (isPublicCheckbox.checked) {
                isPrivateCheckbox.checked = false;
            }
        });

        isPrivateCheckbox.addEventListener('change', () => {
            if (isPrivateCheckbox.checked) {
                isPublicCheckbox.checked = false;
            }
        });

        // Attach event listener to the form
        document.getElementById('createGroupForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            const formData = new FormData(e.target);
            const groupData = {
                gname: formData.get("groupName"),
                isPrivate: formData.get("isPrivate") === "on",
                isPublic: formData.get("isPublic") === "on",
                role: "owner",
            };

            if (!groupData.isPrivate && !groupData.isPublic) {
                //alert("You must select either Private or Public.");
                return;
            }

            try {
                const res = await fetch('https://astro-d1-integration.ecrawford4.workers.dev/api/groups', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(groupData),
                });
                if (res.status === 200) {
                    const createdGroup = await res.json();
                    alert("Group created successfully! You are now the Owner.");
                    e.target.reset();
                    displayGroup(createdGroup);
                    loadGroupMembers();
                    loadAllGroups(); // <-- Add this line
                } else {
                    alert("Failed to create group.");
                }
            } catch (err) {
                alert("An error occurred while creating the group.");
            }
        });

        function showMainSections() {
            document.getElementById('createGroupForm').style.display = "block";
            document.getElementById('joinGroupSection').style.display = "block";
            document.getElementById('allGroupsSection').style.display = "block";
            groupManagementSection.style.display = "block";
            createdGroupSection.style.display = "none";
            groupPostsSection.style.display = "none";
            // Show the Create Group header again
            document.getElementById('createGroupHeader').style.display = "block";
        }

        document.getElementById('createPostForm').onsubmit = async function(e) {
            e.preventDefault();
            const formData = new FormData(e.target);
            const postData = {
                gid: currentGroupId,
                caption: formData.get("postCaption"),
                content: formData.get("postContent"),
            };

            try {
                const res = await fetch('https://astro-d1-integration.ecrawford4.workers.dev/api/posts', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(postData),
                });
                if (res.status === 200) {
                    alert("Post created successfully!");
                    e.target.reset();
                    loadGroupPosts();
                } else {
                    alert("Failed to create post.");
                }
            } catch (err) {
                alert("An error occurred while creating the post.");
            }
        };

        // Render saved posts (if any)
        window.addEventListener('DOMContentLoaded', () => {
            setupFormHandlers(currentGroupId); // Use the same handler as index.astro
            renderSavedPosts(currentGroupId);  // Only show posts for this group
        });
    </script>
</Layout>
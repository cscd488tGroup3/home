---
const { pid } = Astro.props;
---

<reaction-widget data-pid={pid}></reaction-widget>

<script type="module" is:inline>
  /**
   * ReactionWidget class handles the reaction functionality
   */
  class ReactionWidget extends HTMLElement {
    async connectedCallback() {
      const pid = this.dataset.pid;
      const uid = document.querySelector('meta[name="user-id"]')?.content || 'unknown-user';
      const rid = crypto.randomUUID();

      let liked = false;

      this.innerHTML = `
        <button class="btn btn-sm btn-outline btn-primary">üëç Like</button>
        <span class="ml-2 text-sm text-gray-500">0 likes</span>
      `;

      const button = this.querySelector('button');
      const counter = this.querySelector('span');

      const updateCount = async () => {
        try {
          const res = await fetch("/.netlify/functions/aggregateReactions", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ pid }),
          });
          const result = await res.json();
          const count = result ?? 0;
          counter.textContent = `${count} like${count === 1 ? '' : 's'}`;
        } catch (err) {
          console.error("Failed to fetch like count:", err);
        }
      };

      const checkIfLiked = async () => {
        try {
          const res = await fetch("/.netlify/functions/hasReaction", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ pid, uid }),
          });
          const result = await res.json();
          liked = Array.isArray(result) && result.length === 1;
        } catch (err) {
          console.error("Failed to check if liked:", err);
          liked = false;
        }
      };

      const updateButton = () => {
        if (liked) {
          button.classList.remove("btn-outline");
          button.classList.add("btn-secondary");
          button.textContent = "üëé Unlike";
        } else {
          button.classList.add("btn-outline");
          button.classList.remove("btn-secondary");
          button.textContent = "üëç Like";
        }
      };

      button.addEventListener("click", async () => {
        try {
          const endpoint = liked
            ? "/.netlify/functions/deleteReaction"
            : "/.netlify/functions/createReaction";

          await fetch(endpoint, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ pid, uid, rid }),
          });

          liked = !liked;
          updateButton();
          await updateCount();
        } catch (err) {
          console.error("Reaction toggle failed:", err);
        }
      });

      // Initial setup
      await checkIfLiked();
      updateButton();
      await updateCount();
    }
  }

  // Register only once globally
  if (!customElements.get("reaction-widget")) {
    customElements.define("reaction-widget", ReactionWidget);
  }
</script>
